name: Test and deploy dictionaries

# OVERVIEW
#
# The `dictionaryutils` package is used for dumping the schemas from the
# parent dictionary repo.
# Dependencies on both `gen3dictionary` and `gdcdictionary`
# cause conflict in importing the correct `SCHEMA_DIR` used for dumping schemas.
#
# The purpose of this workflow is to set up a virtual environment where dumped
# schemas are from the parent dictionary repo and are not from those
# installed by dictionaryutils.
#
# There are two steps to ensure setting the correct source:
#  - uninstall `gen3dictionary` and `gdcdictionary` after the dictionaryutils install.
#  - Re-install the dictionary in the parent repo as `gdcdictionary`
#
# Then the `run_tests.sh` script will:
#   - run the dictionary tests from dictionaryutils which expects `gdcdictionary`
#     library as the unit to test
#   - run the dump schemas to move it to the /artifacts folder
#
# All commands should be run under `poetry run` to ensure that changes take
# place in the poetry virtual env.

on:
  workflow_call:
    inputs:
      BUCKET:
        required: false
        type: string
        default: "dictionary-artifacts"
      REGION:
        required: false
        type: string
        default: "us-east-1"
      DIRECTORY:
        required: true
        type: string
    secrets:
      DICT_AWS_ACCESS_KEY_ID:
        required: true
      DICT_AWS_SECRET_ACCESS_KEY:
        required: true
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Check PR
      run: |
        echo Event name: ${{ github.event_name }}
        if [[ ${{ github.event_name }} = "pull_request" || ${{ github.event_name }} = "pull_request_target" ]]; then
          is_fork=`curl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.event.repository.full_name }}/pulls/${{github.event.number}} | jq -r .head.repo.fork`
          echo Is this a fork? $is_fork
          echo "IS_FORK=$is_fork" >> $GITHUB_ENV
          if [ $is_fork = "true" ]; then
            labels=`curl -s --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.event.repository.full_name }}/issues/${{github.event.number}}/labels | jq -r '.[].name'`
            echo Labels: $labels
            if [[ ! " ${labels[*]} " =~ "safe to test" ]]; then
              echo "ERROR: PRs from forks must be labeled with 'safe to test' to run the CI"
              exit 1
            fi
          fi
        fi
    - name: Checkout
      run: |
        # checkout the code - this supports checking out from a private fork
        git clone https://Bot:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.event.repository.full_name }}
        cd ${{ github.event.repository.name }}
        if [ ${{ github.event_name }} = "push" ]; then
          branch=${GITHUB_REF#refs/*/}
          echo Push event: checking out branch $branch
          git checkout $branch
        else # this is a pull request
          echo Pull request event: checking out branch from PR ${{github.event.number}}
          git fetch origin pull/${{github.event.number}}/head:localbranch
          git checkout localbranch
        fi
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install AWS CLI
      uses: chrislennon/action-aws-cli@1.1
    - name: Install poetry
      # that is poetry's recommended way to install
      run: |
        pip install --upgrade pip
        curl -sSL https://install.python-poetry.org | python -
        pip list
    - name: Attempt poetry install of dictionary as `gdcdictionary`
      # this will only work when the dictionary is using a poetry setup with pyproject.toml
      run: |
        cd ${{ github.event.repository.name }}
        poetry install -vv --all-extras --no-interaction || true
    - name: Get dictionaryutils library and install
      run: |
        cd ${{ github.event.repository.name }}
        git clone https://github.com/uc-cdis/dictionaryutils
        cd dictionaryutils
        poetry install -vv --all-extras --no-interaction
    - name: Uninstall gdcdictionary
      # remove gdcdictionary or gen3dictionary conditionally
      run: |
        cd ${{ github.event.repository.name }}
        if [ -f pyproject.toml ]; then
          cd dictionaryutils
          echo "Removing 'gen3dictionary' via pip"
          poetry run pip uninstall -y gen3dictionary
          poetry run pip uninstall -y gdcdictionary
        elif [ -f setup.py ]; then
          cd dictionaryutils
          echo "Removing 'gdcdictionary' via poetry"
          poetry remove gdcdictionary
          poetry run pip uninstall -y gen3dictionary
        fi
    - name: Attempt re-install of dictionary as `gdcdictionary`
      run: |
        cd ${{ github.event.repository.name }}
        echo "Re-installing the dictionary as 'gdcdictionary'"
        cd dictionaryutils
        poetry run pip install ..
    - name: Run dictionary tests, dump schema, and move to S3
      run: |
        cd ${{ github.event.repository.name }}/dictionaryutils
        echo "dependencies before run_test"
        poetry show
        echo "Schema dir for artifact"
        poetry run python -c "from gdcdictionary import SCHEMA_DIR; print(SCHEMA_DIR)"
        echo "Schemas"
        ls `poetry run python -c "from gdcdictionary import SCHEMA_DIR; print(SCHEMA_DIR)"`
        echo "Run tests under poetry"
        poetry run ./run_tests.sh
        echo "Number of schemas in artifact"
        grep -o ".yaml\"" artifacts/schema.json | wc -l

        if [ ${{ env.IS_FORK }} = "true" ]; then
          branch=fork-pr-${{github.event.number}}
        else
          branch=$GITHUB_REF_NAME
        fi
        echo "Uploading file to: 's3://${{ inputs.BUCKET }}/${{ inputs.DIRECTORY }}/$branch/schema.json'"
        aws s3 cp artifacts/schema.json s3://${{ inputs.BUCKET }}/${{ inputs.DIRECTORY }}/$branch/schema.json --region ${{ inputs.REGION }}

      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.DICT_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.DICT_AWS_SECRET_ACCESS_KEY }}
        AWS_EC2_METADATA_DISABLED: true
